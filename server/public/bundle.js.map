{"version":3,"names":[],"mappings":"","sources":["bundle.js"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst challenge_controller_1 = require(\"./controllers/challenge.controller\");\nconst challenge_service_1 = require(\"./services/challenge.service\");\nconst challenge_view_1 = require(\"./views/challenge.view\");\nconst login_view_1 = require(\"./views/login.view\");\nconst signup_view_1 = require(\"./views/signup.view\");\nconst user_service_1 = require(\"./services/user.service\");\nconst signup_controller_1 = require(\"./controllers/signup.controller\");\nconst home_view_1 = require(\"./views/home.view\");\nconst home_controller_1 = require(\"./controllers/home.controller\");\nconst game_view_1 = require(\"./views/game.view\");\nconst game_service_1 = require(\"./services/game.service\");\nconst game_controller_1 = require(\"./controllers/game.controller\");\n// REVIEW: Most specific type found so far since:\n// classes are functions, and functions are objects in js...\n// (Class instances are not defined as function subtypes though,\n//  and lack bind(), call(), etc...)\nlet app;\nconst urlParams = new URLSearchParams(window.location.search);\nconst page = urlParams.get('page');\nconst session_id = urlParams.get('session_id');\nswitch (page) {\n    case 'signup':\n        app = new signup_controller_1.SignupController(new user_service_1.UserService(), new signup_view_1.SignupView());\n        break;\n    case 'home':\n        app = new home_controller_1.HomeController(session_id, new home_view_1.HomeView());\n        break;\n    case 'challenge':\n        app = new challenge_controller_1.ChallengeController(session_id, new challenge_service_1.ChallengeService(), new challenge_view_1.ChallengeView());\n        break;\n    case 'game':\n        app = new game_controller_1.GameController(new game_service_1.GameService(), new game_view_1.GameView());\n        break;\n    case 'demo':\n        break;\n    case 'login':\n        app = new login_view_1.LoginView();\n        break;\n    default:\n        const { origin, pathname } = location;\n        // redirect bad/missing page params to login\n        location.replace(origin + pathname + '?page=login');\n        break;\n}\n\n},{\"./controllers/challenge.controller\":2,\"./controllers/game.controller\":3,\"./controllers/home.controller\":4,\"./controllers/signup.controller\":5,\"./services/challenge.service\":9,\"./services/game.service\":10,\"./services/user.service\":11,\"./views/challenge.view\":14,\"./views/game.view\":15,\"./views/home.view\":16,\"./views/login.view\":17,\"./views/signup.view\":18}],2:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @class Controller\n *\n * Links the user input and the view output.\n *\n * @param model\n * @param view\n */\nclass ChallengeController {\n    constructor(session_id, challengeService, challengeView) {\n        this.session_id = session_id;\n        this.challengeService = challengeService;\n        this.challengeView = challengeView;\n        this.onUserListChanged = (challenge) => {\n            this.challengeView.displayUsers(challenge);\n        };\n        this.handleStartChallenge = (challenge) => {\n            // TODO: call this.challengeService to \n            // initialize and record (in Mongo) the \n            // start of a challenge, e.g...\n            //this.challengeService.startChallenge(challenge)...\n            // And route to game play page...\n            const { origin, pathname } = location;\n            location.replace(origin + pathname + '?page=game&session_id=' + this.session_id);\n        };\n        this.handleAddUser = (challenge) => {\n            this.challengeService.add(challenge);\n        };\n        this.handleEditUser = (id, challenge) => {\n            this.challengeService.edit(id, challenge);\n        };\n        this.handleDeleteUser = (id) => {\n            this.challengeService.delete(id);\n        };\n        this.handleToggleUser = (id) => {\n            this.challengeService.toggle(id);\n        };\n        // Explicit this binding\n        this.challengeService.bindUserListChanged(this.onUserListChanged);\n        // First \"real\" Code blitz handler... :)\n        this.challengeView.bindStartChallenge(this.handleStartChallenge);\n        // Useful examples refactored from original MVC template...\n        // (Renamed from contact/user application to Code Blitz/challenge\n        //  but may be further modified (or removed)...)\n        this.challengeView.bindAddUser(this.handleAddUser);\n        this.challengeView.bindEditUser(this.handleEditUser);\n        this.challengeView.bindDeleteUser(this.handleDeleteUser);\n        this.challengeView.bindToggleUser(this.handleToggleUser);\n        // Display initial users\n        this.onUserListChanged(this.challengeService.users);\n    }\n}\nexports.ChallengeController = ChallengeController;\n\n},{}],3:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst client_game_model_1 = require(\"../models/client.game.model\");\n/**\n * @class Controller\n *\n * Links the user input and the view output.\n *\n * @param model\n * @param view\n */\nclass GameController {\n    // Use the constructor shortcut 'private' feature instead...\n    //  private gameService : HandleMoveToken;\n    constructor(gameService, gameView) {\n        this.gameService = gameService;\n        this.gameView = gameView;\n        this.handleMoveToken = (tokenID, direction) => {\n            this.gameService.moveToken(tokenID, direction);\n        };\n        // TODO: Study: Are constructor parameters added to 'this' class instance?\n        client_game_model_1.locations.forEach((location) => {\n            this.gameService.bindTokenLocationChanged(location, (tokens) => {\n                this.gameView.display(location, tokens);\n            });\n        });\n        // NOTE: Cannot directly call this.gameService.moveToken()\n        // from here because context is NOT properly conveyed\n        // to service method.  We MUST call handleMoveToken below.\n        // (REVIEW: THIS PATTERN)\n        this.gameView.bindMoveToken(this.handleMoveToken);\n    }\n}\nexports.GameController = GameController;\n\n},{\"../models/client.game.model\":7}],4:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass HomeController {\n    constructor(session_id, homeView) {\n        this.session_id = session_id;\n        this.homeView = homeView;\n        this.handleStartPlay = (mode) => {\n            const { origin, pathname } = location;\n            if (mode === 'challenge')\n                location.replace(origin + pathname\n                    + '?page=challenge&session_id=' + this.session_id);\n            else\n                alert('Single player mode not yet implemented.');\n        };\n        this.homeView.bindStartPlay(this.handleStartPlay);\n    }\n}\nexports.HomeController = HomeController;\n\n},{}],5:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass SignupController {\n    constructor(userService, signupView) {\n        this.userService = userService;\n        this.signupView = signupView;\n        this.handleAddUser = (userInfo) => {\n            this.userService.addUser(userInfo)\n                .then(res => {\n                const { origin, pathname } = location;\n                if (res._id)\n                    location.replace(origin + pathname + '?page=home&session_id=' + res._id);\n                else\n                    throw res;\n            })\n                .catch(reason => {\n                alert(`Failed to create new user; reason=${JSON.stringify(reason)}`);\n            });\n        };\n        this.signupView.bindAddUser(this.handleAddUser);\n    }\n}\nexports.SignupController = SignupController;\n\n},{}],6:[function(require,module,exports){\n\"use strict\";\n/**\n * @class Model\n *\n * Manages the data of the application.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst util_1 = require(\"../utils/util\");\nclass Challenge {\n    constructor({ name, winLossRecord, online } = {\n        name: null,\n        winLossRecord: null,\n        online: false\n    }) {\n        this.id = util_1.uuidv4();\n        this.name = name;\n        this.winLossRecord = winLossRecord;\n        this.online = online;\n    }\n}\nexports.Challenge = Challenge;\n\n},{\"../utils/util\":13}],7:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.locations = ['conveyor', 'token bank', 'code'];\n\n},{}],8:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass UserInfo {\n    constructor(name, email, password, language = 'Javascript', online = true, wins = 0, losses = 0, avgScore = 0) {\n        this.name = name;\n        this.email = email;\n        this.password = password;\n        this.language = language;\n        this.online = online;\n        this.wins = wins;\n        this.losses = losses;\n        this.avgScore = avgScore;\n    }\n}\nexports.UserInfo = UserInfo;\n\n},{}],9:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst challenge_model_1 = require(\"../models/challenge.model\");\n/**\n * @class Service\n *\n * Manages the data of the application.\n */\nclass ChallengeService {\n    constructor() {\n        const users = JSON.parse(localStorage.getItem('users')) || [];\n        this.users = users.map(user => new challenge_model_1.Challenge(user));\n    }\n    bindUserListChanged(callback) {\n        this.onUserListChanged = callback;\n    }\n    _commit(users) {\n        this.onUserListChanged(users);\n        localStorage.setItem('users', JSON.stringify(users));\n    }\n    add(user) {\n        this.users.push(new challenge_model_1.Challenge(user));\n        this._commit(this.users);\n    }\n    edit(id, userToEdit) {\n        let user = this.users\n            .find(({ id: user_id }) => user_id === id);\n        Object.assign(user, userToEdit);\n        this._commit(this.users);\n    }\n    delete(_id) {\n        this.users = this.users.filter(({ id }) => id !== _id);\n        this._commit(this.users);\n    }\n    toggle(_id) {\n        this.users = this.users.map(user => user.id === _id ? new challenge_model_1.Challenge(Object.assign(Object.assign({}, user), { online: !user.online })) : user);\n        this._commit(this.users);\n    }\n}\nexports.ChallengeService = ChallengeService;\n\n},{\"../models/challenge.model\":6}],10:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst client_game_model_1 = require(\"../models/client.game.model\");\nconst Fetch_1 = require(\"../utils/Fetch\");\n/**\n * @class Service\n *\n * Manages the data of the application.\n */\nclass GameService {\n    constructor() {\n        this.tokens = {};\n        this.tokenLocationArray = {};\n        this.onTokenLocationChanged = {};\n        // Initialize location arrays...\n        client_game_model_1.locations.forEach((location) => {\n            this.tokenLocationArray[location] = []; // initialize arrays\n        });\n        // Read exercise data from server and load it\n        Fetch_1.Fetch('/token')\n            .then(res => res && res.json())\n            .then(this.loadExercise.bind(this));\n    }\n    loadExercise(exerciseTokens) {\n        // Load all game tokens to\n        // the central game token storage object\n        // with a location setting of conveyor...\n        this.tokens = exerciseTokens.reduce((result, exerciseToken, index) => {\n            result[exerciseToken.id]\n                = Object.assign(Object.assign({}, exerciseToken), { location: 'conveyor' });\n            return result;\n        }, {});\n        this.refreshLocationArrays();\n        this.commit(client_game_model_1.locations);\n    }\n    bindTokenLocationChanged(tokenLocation, callback) {\n        this.onTokenLocationChanged[tokenLocation] = callback;\n        // Trigger view refresh on bind\n        this.commit([tokenLocation]);\n    }\n    refreshLocationArrays() {\n        let allIDsToProcess = new Set(Object.keys(this.tokens));\n        // Remove any location array entries that have moved\n        client_game_model_1.locations.forEach((location) => {\n            // Check existing entries for removal or confirmation\n            [...this.tokenLocationArray[location]].forEach((tokenID, index) => {\n                if (this.tokens[tokenID].location === location) {\n                    // Token is confirmed in proper location, so do nothing \n                    // except remove from to-process set\n                    if (!allIDsToProcess.delete(tokenID))\n                        // Hopefully the following will never occur,\n                        // even though our algorithm is 'self healing' in that\n                        // it guarantees we will be restored to a valid state.\n                        alert(`Assertion that tokens should be in only one location FAILED for id ${tokenID}!`);\n                }\n                else {\n                    // Token must have moved, so remove from this (obsolete) location\n                    console.log(`--- location: ${location}`);\n                    console.log(this.tokenLocationArray[location].join());\n                    this.tokenLocationArray[location].splice(index, 1);\n                    console.log(this.tokenLocationArray[location].join());\n                }\n            });\n        });\n        // Add any unconfirmed IDs to their proper location arrays (append to end)\n        allIDsToProcess.forEach((tokenID) => {\n            this.tokenLocationArray[this.tokens[tokenID].location].push(tokenID);\n            // allIDsToProcess.delete(tokenID); -- not needed since we process all, and we are done\n        });\n    }\n    moveToken(tokenID, direction) {\n        const oldLocation = this.tokens[tokenID].location;\n        let newPos = client_game_model_1.locations.indexOf(oldLocation) + direction;\n        // Check boundaries\n        if (newPos < 0 || newPos >= client_game_model_1.locations.length)\n            //      alert('Assertion FAILED that tokens not be moved beyond location positions'\n            //      +` 0, 1, and 2; tried to move token ID ${tokenID} to position #${newPos}`);\n            newPos = client_game_model_1.locations.indexOf(oldLocation) - direction; // help w/ testing...\n        //    else { ...\n        // Boundary checks out OK, proceed to move\n        const newLocation = client_game_model_1.locations[newPos];\n        // alert(`tokenID=${tokenID}, direction=${direction}, from=${oldLocation} to ${newLocation}`);\n        this.tokens[tokenID].location = newLocation;\n        this.refreshLocationArrays();\n        this.commit([oldLocation, newLocation]);\n        //    } ...\n        return;\n    }\n    commit(locations) {\n        locations.forEach((location) => {\n            this.onTokenLocationChanged[location](this.tokenLocationArray[location].map(tokenID => this.tokens[tokenID]));\n        });\n    }\n}\nexports.GameService = GameService;\n\n},{\"../models/client.game.model\":7,\"../utils/Fetch\":12}],11:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Fetch_1 = require(\"../utils/Fetch\");\nclass UserService {\n    addUser(userInfo) {\n        return Fetch_1.Fetch('/user', {\n            method: 'POST',\n            body: JSON.stringify(userInfo)\n        })\n            .then(res => res && res.json());\n    }\n}\nexports.UserService = UserService;\n\n},{\"../utils/Fetch\":12}],12:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Fetch = (resource, init = { method: 'GET' }, defaultMessage = true) => {\n    let _init = Object.assign({}, init);\n    _init.headers = _init.headers || {};\n    _init.headers['Content-Type'] = _init.headers['Content-Type'] || 'application/json; charset=utf-8';\n    return new Promise((resolve, reject) => {\n        const { origin, pathname } = location;\n        return fetch(resource, _init)\n            .then(res => {\n            if (res.status >= 400 /* Http error response range */) {\n                if (defaultMessage)\n                    alert(`Error fetching resource ${resource}: ${res.statusText}`);\n                reject(res.statusText);\n            }\n            else\n                resolve(res);\n        })\n            .catch((error) => {\n            if (error)\n                alert(error);\n            else if (defaultMessage)\n                console.warn(`Fetch exception with no error message`);\n            reject(error);\n        });\n    });\n};\n\n},{}],13:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.uuidv4 = () => {\n    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (c) => (c ^\n        (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))).toString(16));\n};\n\n},{}],14:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst challenge_model_1 = require(\"../models/challenge.model\");\nclass ChallengeView {\n    constructor() {\n        this.app = document.querySelector('#root');\n        this.form = this.createElement('form');\n        this.createInput({\n            key: 'inputName',\n            type: 'text',\n            placeholder: 'Name',\n            name: 'name'\n        });\n        this.createInput({\n            key: 'inputWinLossRecord',\n            type: 'text',\n            placeholder: 'Win / Loss',\n            name: 'winLossRecord'\n        });\n        this.submitButton = this.createElement('button');\n        this.submitButton.textContent = 'Submit';\n        this.gameOnButton = this.createElement('button');\n        this.gameOnButton.textContent = 'Game On!';\n        this.form.append(this.inputName, this.inputWinLossRecord, this.submitButton, this.gameOnButton);\n        /*\n            this.gameOnButton.addEventListener('click', event => {\n              const { origin, pathname } = location;\n                  location.replace(origin+pathname+'?page=game');\n            });\n        */\n        this.title = this.createElement('h1');\n        this.title.textContent = 'Challenge';\n        this.userList = this.createElement('ul', 'user-list');\n        this.app.append(this.title, this.form, this.userList);\n        this._temporaryWinLossText = '';\n        this._initLocalListeners();\n    }\n    get _nameText() {\n        return this.inputName.value;\n    }\n    get _winLossRecordText() {\n        return this.inputWinLossRecord.value;\n    }\n    _resetInput() {\n        this.inputName.value = '';\n        this.inputWinLossRecord.value = '';\n    }\n    createInput({ key, type, placeholder, name } = {\n        key: 'default',\n        type: 'text',\n        placeholder: 'default',\n        name: 'default'\n    }) {\n        this[key] =\n            Object.assign(this.createElement('input'), { type, placeholder, name });\n    }\n    createElement(tag, className) {\n        const element = document.createElement(tag);\n        if (className)\n            element.classList.add(className);\n        return element;\n    }\n    displayUsers(users) {\n        // Delete all nodes\n        while (this.userList.firstChild) {\n            this.userList.removeChild(this.userList.firstChild);\n        }\n        // Show default message\n        if (users.length === 0) {\n            const p = this.createElement('p');\n            p.textContent = 'Nothing to do! Add a user?';\n            this.userList.append(p);\n        }\n        else {\n            // Create nodes\n            users.forEach(user => {\n                const li = this.createElement('li');\n                li.id = user.id;\n                const checkbox = this.createElement('input');\n                checkbox.type = 'checkbox';\n                checkbox.checked = user.online;\n                const spanUser = this.createElement('span');\n                const spanAge = this.createElement('span');\n                spanAge.contentEditable = 'true';\n                spanAge.classList.add('editable');\n                if (user.online) {\n                    const strikeName = this.createElement('s');\n                    strikeName.textContent = user.name;\n                    spanUser.append(strikeName);\n                    const strikeAge = this.createElement('s');\n                    strikeAge.textContent = user.winLossRecord;\n                    spanAge.append(strikeAge);\n                }\n                else {\n                    spanUser.textContent = user.name;\n                    spanAge.textContent = user.winLossRecord;\n                }\n                const deleteButton = this.createElement('button', 'delete');\n                deleteButton.textContent = 'Delete';\n                li.append(checkbox, spanUser, spanAge, deleteButton);\n                // Append nodes\n                this.userList.append(li);\n            });\n        }\n    }\n    _initLocalListeners() {\n        this.userList.addEventListener('input', event => {\n            if (event.target.className === 'editable') {\n                this._temporaryWinLossText = event.target.innerText;\n            }\n        });\n    }\n    bindStartChallenge(handler) {\n        this.gameOnButton.addEventListener('click', event => {\n            //\n            // NOTE: Passing a Challenge object is probably \n            // not needed, but I'm just continuing with\n            // the MVC template pattern for now.\n            // (Feel free to remove/simplify/refactor...)\n            // We'll probably reflect challenge and game play\n            // \"state\" all in Mongo, and our services can \n            // always get that information via a Mongoose query.\n            //\n            handler(new challenge_model_1.Challenge({\n                name: this._nameText,\n                winLossRecord: this._winLossRecordText,\n                online: true /*online*/\n            }));\n        });\n    }\n    bindAddUser(handler) {\n        this.form.addEventListener('submit', event => {\n            event.preventDefault();\n            if (this._nameText) {\n                handler({\n                    name: this._nameText,\n                    winLossRecord: this._winLossRecordText\n                });\n                this._resetInput();\n            }\n        });\n    }\n    bindDeleteUser(handler) {\n        this.userList.addEventListener('click', event => {\n            if (event.target.className === 'delete') {\n                const id = event.target.parentElement.id;\n                handler(id);\n            }\n        });\n    }\n    bindEditUser(handler) {\n        this.userList.addEventListener('focusout', event => {\n            if (this._temporaryWinLossText) {\n                const id = event.target.parentElement.id;\n                const key = 'winLossRecord';\n                handler(id, { [key]: this._temporaryWinLossText });\n                this._temporaryWinLossText = '';\n            }\n        });\n    }\n    bindToggleUser(handler) {\n        this.userList.addEventListener('change', event => {\n            if (event.target.type === 'checkbox') {\n                const id = event.target.parentElement.id;\n                handler(id);\n            }\n        });\n    }\n}\nexports.ChallengeView = ChallengeView;\n\n},{\"../models/challenge.model\":6}],15:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst client_game_model_1 = require(\"../models/client.game.model\");\nclass GameView {\n    constructor() {\n        this.ulTokens = {};\n        this.app = document.getElementById('root');\n        const html = `\n            <div class='game-page'>\n                <div class='flex5'>\n                    <div id='prompt'>PROMPT: Write a program to print out 10 numbers</div>\n                    <div id='language'>Javascript</div>                    \n                    <div id='timer'>TIMER &nbsp;<b>3:07</b></div>\n                </div>\n                <div class='conveyor-container'>\n                    <ul id='conveyor' />\n                </div>\n                <div class='flex2'>\n                    <div class='flex3'>\n                        <div class='code-editor'>\n                            <ul id='code' />\n                        </div>\n                        <div id='label'>Token Bank</div>\n                        <div class='token-container'>\n                            <ul id='token_bank' />\n                        </div> \n                    </div>\n                    <div class='flex4'>\n                        <div class=\"stats-container\">\n                            <div class='flex9'>\n                            <div id='stats'><b>MY STATS</b><br><BR>CREDIT: $5.12<br>TOKENS PLACED: 9<BR>LINES OF CODE: 2<BR>AVG COST PER LINE: $0.85<br>SUBMIT ATTEMPTS: 0</div>\n                            </div>\n                            <div class='flex9'>\n                            <div id='stats'><b>OPPONENT STATS</b><br><BR>CREDIT: $4.78<br>TOKENS PLACED: 12<BR>LINES OF CODE: 3<BR>AVG COST PER LINE: $0.72<br>SUBMIT ATTEMPTS: 1</div>\n                            </div>\n                        </div>\n                        <div class='opponentCode'>\n                        </div>\n\n                        <button id=\"myBtn\"><div class='submitButton'><div class='submit'>SUBMIT CODE</div>\n                        </div></button>\n                        <div id=\"myModal\" class=\"modal\">\n                            <div class=\"modal-content\">\n                                <span class=\"close\">&times;</span>\n                                <p>YOU WIN!</p>\n                            </div>\n                        </div>\n\n                        <div class='flex6'>\n                            <div class='flex7'>\n                                <div id='label'>Return Token</div>\n                                <div class='sellBack'>\n                                </div>\n                            </div>\n                            <div class='flex8'>\n                                <div id='label2'>Budget</div>                            \n                                <div class='credit'><br><br>CREDIT<br>$ 5.12\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            \n        `;\n        this.app.innerHTML = html;\n        //POP UP CODE START:\n        var modal = document.getElementById(\"myModal\");\n        // Get the button that opens the modal\n        var btn = document.getElementById(\"myBtn\");\n        // Get the <span> element that closes the modal\n        var span = document.getElementsByClassName(\"close\");\n        // When the user clicks the button, open the modal \n        btn.onclick = function () {\n            modal.style.display = \"block\";\n        };\n        // When the user clicks on <span> (x), close the modal\n        span.onclick = function () {\n            modal.style.display = \"none\";\n        };\n        // When the user clicks anywhere outside of the modal, close it\n        window.onclick = function (event) {\n            if (event.target == modal) {\n                modal.style.display = \"none\";\n            }\n        };\n        //END POP UP CODE.\n        client_game_model_1.locations.forEach((location) => {\n            this.ulTokens[location]\n                = document.getElementById(location.replace(' ', '_') // spaces not valid in HTML IDs\n                );\n        });\n    }\n    bindMoveToken(handler) {\n        client_game_model_1.locations.forEach((location) => {\n            this.ulTokens[location].addEventListener('click', event => {\n                handler(event.target.id, 1);\n            });\n        });\n    }\n    display(location, tokens) {\n        // clear any prior tokens\n        this.ulTokens[location].innerText = '';\n        let indentationLevel = 0;\n        tokens.forEach((token) => {\n            const li = document.createElement('li');\n            li.id = token.id;\n            li.innerHTML = token.token;\n            li.classList.add(token.type);\n            switch (token.token) {\n                case '{':\n                    indentationLevel++;\n                    li.classList.add('open-curly-bracket');\n                    break;\n                case '}':\n                    indentationLevel--;\n                    li.classList.add('close-curly-bracket');\n                    break;\n            }\n            li.classList.add('indent-' + indentationLevel.toString());\n            this.ulTokens[location].appendChild(li);\n        });\n    }\n}\nexports.GameView = GameView;\n\n},{\"../models/client.game.model\":7}],16:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass HomeView {\n    constructor() {\n        this.app = document.getElementById('root');\n        const html = `\n        <div class='formCenter'>\n            <form id='homePage'>\n                <div class = 'box'>\n                    <img src=\"http://icon-library.com/images/blitz-icon/blitz-icon-18.jpg\" alt=\"Blitz Icon\" width=\"128\" height=\"128\">\n                    <h1>Code Blitz</h1>\n                    <div>\n                        <button id='challenge' type='submit'>Challenge</button>\n                        <button id='singlePlay' type='submit'>Single Play</button>\n                    </div> \n                </div>\n            </form>\n        </div>\n        `;\n        this.app.innerHTML = html;\n    }\n    bindStartPlay(handler) {\n        [...document.getElementsByTagName(\"button\")]\n            .forEach((element) => {\n            element.addEventListener('click', event => {\n                event.preventDefault();\n                const buttonID = event.target.id;\n                handler(buttonID);\n            });\n        });\n    }\n}\nexports.HomeView = HomeView;\n\n},{}],17:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass LoginView {\n    constructor() {\n        this.app = document.getElementById('root');\n        const html = `\n        <div class='formCenter'>\n            <form id='loginForm' method='post'>\n                <div class = 'box'>\n                    <img src=\"http://icon-library.com/images/blitz-icon/blitz-icon-18.jpg\" alt=\"Blitz Icon\" width=\"128\" height=\"128\">\n                    <h1>Code Blitz</h1>\n                    <div>\n                        <img src=\"http://icons.iconarchive.com/icons/custom-icon-design/mono-general-2/512/mail-icon.png\" alt=\"Mail Icon\" width=\"20\" height=\"20\">\n                        <input name='email' type='text' placeholder='Email' />\n                    </div>\n                    <div>\n                        <img src=\"https://cdn2.iconfinder.com/data/icons/flat-ui-icons-24-px/24/lock-24-512.png\" alt=\"Lock Icon\" width=\"20\" height=\"20\">\n                        <input name='password' type='password' placeholder='Password' />\n                    </div>\n                    <div>\n                        <button type='submit'>Sign In</button>\n                    </div>\n                    <div>\n                        <p> Don't have an account? \n                        <a href=\"?page=signup\" target =\"_top\" >Create an account</a>\n                    </div>\n                </div>\n            </form>\n        </div>\n        `;\n        this.app.innerHTML = html;\n        document.getElementById('loginForm')\n            .addEventListener('submit', event => {\n            //event.preventDefault(); -- actually post is handy, no need for ajax call\n            const { origin, pathname } = location;\n            setTimeout(() => {\n                // timeout is temporary hack pending server auth implementation\n                location.replace(origin + pathname + '?page=signup');\n            });\n        });\n        //    this._t emporaryAgeText = '';\n        //    this._initLocalListeners();\n    }\n}\nexports.LoginView = LoginView;\n\n},{}],18:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst user_model_1 = require(\"../models/user.model\");\nclass SignupView {\n    constructor() {\n        this.app = document.getElementById('root');\n        const html = `\n            <div class='formCenter'>\n                <form id='Signup'>\n                    <div class = 'box'>\n                        <img src=\"http://icon-library.com/images/blitz-icon/blitz-icon-18.jpg\" alt=\"Blitz Icon\" width=\"128\" height=\"128\">\n                        <h1>Code Blitz Signup</h1>\n                        <div>\n                            <img src=\"https://cdn2.iconfinder.com/data/icons/font-awesome/1792/user-512.png\" alt=\"user Icon\" width=\"20\" height=\"20\">\n                            <input name='name' type='text' placeholder='Name' />            \n                        </div>\n                        <div>\n                            <img src=\"http://icons.iconarchive.com/icons/custom-icon-design/mono-general-2/512/mail-icon.png\" alt=\"Mail Icon\" width=\"20\" height=\"20\">\n                            <input name='email' type='text' placeholder='Email' />\n                        </div>\n                        <div>\n                            <img src=\"https://cdn2.iconfinder.com/data/icons/flat-ui-icons-24-px/24/lock-24-512.png\" alt=\"Lock Icon\" width=\"20\" height=\"20\">\n                            <input name='password' type='password' placeholder='Password' />\n                        </div>\n                        <div>\n                            <button type='submit'>Let's Code!</button>\n                        </div>\n                    </div>\n                </form>\n            </div>\n        `;\n        this.app.innerHTML = html;\n    }\n    bindAddUser(handler) {\n        document.getElementById('Signup')\n            .addEventListener('submit', event => {\n            event.preventDefault();\n            const fields = document.forms['Signup'].elements;\n            handler(new user_model_1.UserInfo(fields[0].value, // name\n            fields[1].value, // email\n            fields[2].value // password\n            ));\n        });\n    }\n}\nexports.SignupView = SignupView;\n\n},{\"../models/user.model\":8}]},{},[1]);\n"],"file":"bundle.js"}